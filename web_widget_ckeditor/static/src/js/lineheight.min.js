! function(e, t) {
	"object" == typeof exports && "object" == typeof module ? module.exports = t() : "function" == typeof define && define.amd ? define([], t) : "object" == typeof exports ? exports.CKEditor5 = t() : (e.CKEditor5 = e.CKEditor5 || {}, e.CKEditor5["ckeditor5_line_height"] = t())
}(self, (() => (() => {
	var e = {
			"ckeditor5/src/core.js": (e, t, i) => {
				e.exports = i("dll-reference CKEditor5.dll")("./src/core.js")
			},
			"ckeditor5/src/ui.js": (e, t, i) => {
				e.exports = i("dll-reference CKEditor5.dll")("./src/ui.js")
			},
			"ckeditor5/src/utils.js": (e, t, i) => {
				e.exports = i("dll-reference CKEditor5.dll")("./src/utils.js")
			},
			"dll-reference CKEditor5.dll": e => {
				"use strict";
				e.exports = CKEditor5.dll
			}
		},
		t = {};

	function i(o) {
		var n = t[o];
		if (void 0 !== n) return n.exports;
		var r = t[o] = {
			exports: {}
		};
		return e[o](r, r.exports, i), r.exports
	}
	i.d = (e, t) => {
		for (var o in t) i.o(t, o) && !i.o(e, o) && Object.defineProperty(e, o, {
			enumerable: !0,
			get: t[o]
		})
	}, i.o = (e, t) => Object.prototype.hasOwnProperty.call(e, t);
	var o = {};
	return (() => {
		"use strict";
		i.d(o, {
			default: () => g
		});
		var e = i("ckeditor5/src/core.js");

		function t(e) {
			return /^\d(.\d+)?$/gm.test(String(e))
		}

		function n(e) {
			if ("object" == typeof e) return e;
			if ("default" === e) return {
				model: void 0,
				title: "Default"
			};
			const t = parseFloat(e);
			return isNaN(t) ? void 0 : function(e) {
				const t = String(e);
				return {
					title: t,
					model: e,
					view: {
						name: "span",
						styles: {
							"line-height": t
						},
						priority: 5
					}
				}
			}(t)
		}
		var r = i("ckeditor5/src/utils.js");
		const s = "lineHeight";
		class l extends e.Command {
			refresh() {
				const e = (0, r.first)(this.editor.model.document.selection.getSelectedBlocks());
				this.isEnabled = !!e && this._canSetLineHeight(e), this.value = this.isEnabled && e.hasAttribute(s) ? e.getAttribute(s) : "1"
			}
			execute(e = {}) {
				const t = this.editor.model,
					i = t.document,
					o = e.value;
				t.change((e => {
					const t = Array.from(i.selection.getSelectedBlocks()).filter((e => this._canSetLineHeight(e)));
					t[0].getAttribute(s) === o || void 0 === o ? function(e, t) {
						for (const i of e) t.removeAttribute(s, i)
					}(t, e) : function(e, t, i) {
						for (const o of e) t.setAttribute(s, i, o)
					}(t, e, o)
				}))
			}
			_canSetLineHeight(e) {
				return this.editor.model.schema.checkAttribute(e, s)
			}
		}
		class c extends e.Plugin {
			constructor(e) {
				super(e), e.config.define("lineHeight", {
					options: [0, .5, 1, 1.5, 2, 2.5, 3, 3.5, 4, 4.5, 5, 5.5, 6, 6.5]
				})
			}
			init() {
				const e = this.editor,
					i = e.model.schema,
					o = e.config.get("lineHeight.options").map((e => String(e))).filter(t);
				i.extend("$block", {
					allowAttributes: "lineHeight"
				}), e.model.schema.setAttributeProperties("lineHeight", {
					isFormatting: !0
				});
				const n = function(e) {
					const t = {
						model: {
							key: "lineHeight",
							values: e.slice()
						},
						view: {}
					};
					for (const i of e) t.view[i] = {
						key: "style",
						value: {
							"line-height": i
						}
					};
					return t
				}(o);
				e.conversion.attributeToAttribute(n), e.commands.add("lineHeight", new l(e))
			}
		}
		var d = i("ckeditor5/src/ui.js");
		class a extends e.Plugin {
			init() {
				const e = this.editor,
					t = e.t,
					i = this._getLocalizedOptions(),
					o = e.commands.get("lineHeight");
				e.ui.componentFactory.add("lineHeight", (n => {
					const s = (0, d.createDropdown)(n);
					return (0, d.addListToDropdown)(s, function(e, t) {
						const i = new r.Collection;
						for (const o of e) {
							const e = {
								type: "button",
								model: new d.Model({
									commandName: "lineHeight",
									commandParam: o.model,
									label: o.title,
									class: "ckeditor5-lineHeight-dropdown",
									withText: !0
								})
							};
							o.view && o.view.classes && e.model.set("class", `${e.model.class} ${o.view.classes}`), e.model.bind("isOn").to(t, "value", (e => (e ? parseFloat(e) : e) === o.model)), i.add(e)
						}
						return i
					}(i, o)), s.buttonView.set({
						label: t("Line Height"),
						icon: e.config.get("lineHeight.icon") || '<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" version="1.1"  width="24" height="24" viewBox="0 0 24 24"><path fill="#000000" d="M10,13H22V11H10M10,19H22V17H10M10,7H22V5H10M6,7H8.5L5,3.5L1.5,7H4V17H1.5L5,20.5L8.5,17H6V7Z" /></svg>',
						tooltip: !0
					}), s.extendTemplate({
						attributes: {
							class: ["ckeditor5-lineHeight-dropdown"]
						}
					}), s.bind("isEnabled").to(o), this.listenTo(s, "execute", (t => {
						e.execute(t.source.commandName, {
							value: t.source.commandParam
						}), e.editing.view.focus()
					})), s
				}))
			}
			_getLocalizedOptions() {
				const e = this.editor,
					i = {
						Default: (0, e.t)("Default")
					};
				return e.config.get("lineHeight.options").filter((e => t(e))).map(n).filter((e => !!e)).map((e => {
					const t = i[e.title];
					return t && t != e.title && (e = Object.assign({}, e, {
						title: t
					})), e
				}))
			}
		}
		class u extends e.Plugin {
			static get requires() {
				return [c, a]
			}
			static get pluginName() {
				return "LineHeight"
			}
		}
		const g = {
			LineHeight: u
		}
	})(), o = o.default
})()));